// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = env("GENERATE_OUTPUT")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Определение модели для пользователей
model User {
  id                        Int       @id @default(autoincrement())
  username                  String    @unique
  email                     String    @unique
  password                  String
  role                      Role
  player                    Player?   @relation(fields: [playerId], references: [id])
  coach                     Coach?    @relation(fields: [coachId], references: [id])
  playerId                  Int?      @unique
  coachId                   Int?      @unique
  resetPasswordToken        String? // Поле для токена сброса пароля
  resetPasswordTokenExpires DateTime? // Поле для времени истечения токена сброса пароля
  currentToken              String?
}

// Определение ролей пользователей
enum Role {
  PLAYER
  COACH
}

// Определение модели для игроков
model Player {
  id                   Int                   @id @default(autoincrement())
  userId               Int                   @unique
  name                 String
  team                 Team?                 @relation(fields: [teamId], references: [id]) // Ссылка на команду (может быть null, если игрок не состоит в команде)
  avatar               String?
  ratings              Rating[] // Обратная связь для оценок
  teamId               Int?
  scoreSaberId         String?
  beatLeaderId         String?
  CompletedTrack       CompletedTrack[]
  Goal                 Goal[]
  User                 User?
  BeatLeaderStatistics BeatLeaderStatistics?
  ScoreSaberStatistics ScoreSaberStatistics?
}

// Определение модели статистики с beatLeader
model BeatLeaderStatistics {
  id                            Int     @id @default(autoincrement())
  playerId                      Int     @unique
  player                        Player? @relation(fields: [playerId], references: [id])
  accPp                         Int?
  passPp                        Int?
  techPp                        Int?
  totalScore                    String?
  totalUnrankedScore            String?
  totalRankedScore              String?
  lastScoreTime                 String?
  lastUnrankedScoreTime         String?
  lastRankedScoreTime           String?
  averageRankedAccuracy         Float?
  averageWeightedRankedAccuracy Float?
  averageUnrankedAccuracy       Float?
  averageAccuracy               Float?
  medianRankedAccuracy          Float?
  medianAccuracy                Float?
  topRankedAccuracy             Float?
  topUnrankedAccuracy           Float?
  topAccuracy                   Float?
  topPp                         Float?
  topBonusPP                    Float?
  topPassPP                     Float?
  topAccPP                      Float?
  topTechPP                     Float?
  peakRank                      Int?
  rankedMaxStreak               Int?
  unrankedMaxStreak             Int?
  maxStreak                     Int?
  averageLeftTiming             Float?
  averageRightTiming            Float?
  rankedPlayCount               Int?
  unrankedPlayCount             Int?
  totalPlayCount                Int?
  rankedImprovementsCount       Int?
  unrankedImprovementsCount     Int?
  totalImprovementsCount        Int?
  rankedTop1Count               Int?
  unrankedTop1Count             Int?
  top1Count                     Int?
  rankedTop1Score               Float?
  unrankedTop1Score             Float?
  top1Score                     Float?
  averageRankedRank             Float?
  averageWeightedRankedRank     Float?
  averageUnrankedRank           Float?
  averageRank                   Float?
  sspPlays                      Int?
  ssPlays                       Int?
  spPlays                       Int?
  sPlays                        Int?
  aPlays                        Int?
  topPlatform                   String?
  topHMD                        Int?
  topPercentile                 Float?
  countryTopPercentile          Float?
  dailyImprovements             Int?
  authorizedReplayWatched       Int?
  anonimusReplayWatched         Int?
  watchedReplays                Int?
  lastWeekPp                    Float?
  lastWeekRank                  Int?
  lastWeekCountryRank           Int?
  pp                            Float?
  rank                          Int?
  countryRank                   Int?
}

model ScoreSaberStatistics {
  id                    Int     @id @default(autoincrement())
  playerId              Int     @unique
  player                Player? @relation(fields: [playerId], references: [id])
  pp                    Float?
  rank                  Int?
  countryRank           Int?
  totalScore            String?
  totalRankedScore      String?
  averageRankedAccuracy Float?
  totalPlayCount        Int?
  rankedPlayCount       Int?
  replaysWatched        Int?
}

// Определение модели для тренеров
model Coach {
  id       Int     @id @default(autoincrement())
  userId   Int     @unique
  teams    Team[] // Ссылки на команды, которыми руководит тренер
  User     User?
  username String?
}

// Определение модели для рейтинга
model Rating {
  id              Int      @id @default(autoincrement())
  player          Player   @relation(fields: [playerId], references: [id])
  playerId        Int
  date            DateTime
  ppScore         Float // Рейтинг PP от scoresaber.com
  beatleaderScore Float // Рейтинг в системе beatleader
  globalRank      Int // Место по миру
  countryRank     Int // Место в стране
}

// Определение модели для пройденных треков
model CompletedTrack {
  id        Int      @id @default(autoincrement())
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  Int
  date      DateTime
  trackName String
  stars     Int // Количество звёзд трека
}

// Определение модели для целей тренировок
model Goal {
  id             Int       @id @default(autoincrement())
  player         Player    @relation(fields: [playerId], references: [id])
  playerId       Int
  goalType       String // Тип цели (пройти треки, обновить рекорды и т.д.)
  parameters     String // Параметры цели (количество треков, количество звёзд и т.д.)
  setDate        DateTime  @default(now()) // Дата установки цели
  completionDate DateTime? // Дата достижения цели (может быть null, если цель не достигнута)
}

// Определение модели для команд
model Team {
  id                Int      @id @default(autoincrement())
  name              String
  players           Player[] // Ссылки на участников команды
  coach             Coach?   @relation(fields: [coachId], references: [id]) // Ссылка на тренера команды (может быть null)
  coachId           Int?
  coachName         String?
  totalPPBeatLeader String?
  totalPPScoreSaber String?
}
